buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.12.0'
    }
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    version = '1.5.0'.with {
        def r = project.properties['RELEASE']
        if ( r == null) {
            return "$it-SNAPSHOT"
        } else if (r != it) {
            throw new GradleException("RELEASE mismatch: RELEASE='$r', expected '$it'")
        } else {
            return it
        }
    }
    group = 'net.netconomy.tools.restflow'

    repositories {mavenCentral()}

    buildDir = 'target'

    archivesBaseName = buildArtifactBaseName(project)
    idea.module {
        name = archivesBaseName
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    //noinspection UnnecessaryQualifiedReference
    apply plugin: local.LibsPlugin

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    ext.enableMavenPublishing = true

    libs {
        groovy4 {group 'org.apache.groovy' version '4.0.8'}
        groovy3 {group 'org.codehaus.groovy' version '3.0.14'}
        groovy(groovy3) {
            lib 'groovy'
            lib 'groovy-datetime'
            lib 'groovy-nio'
            lib 'groovy-templates'
            lib 'groovy-xml'
            lib 'groovy-json'
            lib 'groovy-swing' // TODO (2023-02-08) required for password prompt, find better solution
        }
        //spock {
        //    def groovyMajor = (~/^(\d+\.\d+)(?:\..*)?/).matcher(groovy.version).with {
        //        matches()
        //        group(1)
        //    }
        //    group 'org.spockframework' version "2.3-groovy-$groovyMajor"
        //    lib('core') {
        //        exclude group: 'org.codehaus.groovy'
        //        exclude group: 'org.apache.groovy'
        //    }
        //}
    }

    //noinspection GroovyAssignabilityCheck
    task sourceJar(type: Jar, group: 'build') {
        archiveClassifier.set 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourceJar
    }

    ext.additionalPublications = [sourceJar]
}

def buildArtifactBaseName(Project prj) {
    if (prj == rootProject) {
        return 'restflow'
    } else {
        return buildArtifactBaseName(prj.parent) + '-' + prj.name
    }
}
